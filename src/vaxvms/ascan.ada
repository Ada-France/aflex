-- A lexical scanner generated by aflex
with text_io; use text_io;
with ascan_dfa; use ascan_dfa; 
with ascan_io; use ascan_io; 
--# line 1 "ascan.l"
-- Copyright (c) 1990 Regents of the University of California.
-- All rights reserved.
--
-- This software was developed by John Self of the Arcadia project
-- at the University of California, Irvine.
--
-- Redistribution and use in source and binary forms are permitted
-- provided that the above copyright notice and this paragraph are
-- duplicated in all such forms and that any documentation,
-- advertising materials, and other materials related to such
-- distribution and use acknowledge that the software was developed
-- by the University of California, Irvine.  The name of the
-- University may not be used to endorse or promote products derived
-- from this software without specific prior written permission.
-- THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
-- IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
-- WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
-- TITLE scanner specification file
-- AUTHOR: John Self (UCI)
-- DESCRIPTION regular expressions and actions matching tokens
--             that aflex expects to find in its input.
-- NOTES input to aflex (NOT alex.)  It uses exclusive start conditions
--       and case insensitive scanner generation available only in aflex
--       (or flex if you use C.)
--       generate scanner using the command 'aflex -is ascan.l'
-- $Header: /co/ua/self/arcadia/aflex/ada/src/RCS/ascan.l,v 1.18 90/01/12 15:20:53 self Exp Locker: self $ 
--
-- Modified 3.9.92 by Simon Wright (sjwright@cix.compulink.co.uk), for VAX/VMS
-- in which you _must_ use Text_Io.New_Line() to end a line, rather than just
-- expecting the runtime to translate '\n' (Ascii.Lf) automatically.
--# line 48 "ascan.l"


with misc_defs, misc, sym, parse_tokens, int_io;
with tstring, ascan_dfa, ascan_io, external_file_manager;
use misc_defs, parse_tokens, tstring;
use ascan_dfa, ascan_io, external_file_manager;

package scanner is
    call_yylex : boolean := false;
    function get_token return Token;
end scanner;

package body scanner is

beglin : boolean := false;
i, bracelevel: integer;

function get_token return Token is
    toktype : Token;
    didadef, indented_code : boolean;
    cclval : integer;
    nmdefptr : vstring;
    nmdef, tmpbuf : vstring;

procedure ACTION_ECHO is
begin
  for i in 1 .. yylength loop
    if yytext (i) /= ascii.lf then
      text_io.put (temp_action_file, yytext (i));
    else
      text_io.new_line (temp_action_file);
    end if;
  end loop;
end ACTION_ECHO;

procedure MARK_END_OF_PROLOG is
begin
     text_io.put( temp_action_file, "%%%% end of prolog" );
     text_io.new_line( temp_action_file );
end MARK_END_OF_PROLOG;

procedure PUT_BACK_STRING(str : vstring; start : integer) is
begin
	for i in reverse start+1..tstring.len(str) loop
	    unput( CHAR(str,i) );
	end loop;
end PUT_BACK_STRING;

function check_yylex_here return boolean is
begin
	return ( (yytext'length >= 2) and then
			((yytext(1) = '#') and (yytext(2) = '#')));
end check_yylex_here;

function YYLex return Token is
subtype short is integer range -32768..32767;
    yy_act : integer;
    yy_c : short;

-- returned upon end-of-file
YY_END_TOK : constant integer := 0;
YY_END_OF_BUFFER : constant := 82;
subtype yy_state_type is integer;
yy_current_state : yy_state_type;
INITIAL : constant := 0;
SECT2 : constant := 1;
SECT2PROLOG : constant := 2;
SECT3 : constant := 3;
PICKUPDEF : constant := 4;
SC : constant := 5;
CARETISBOL : constant := 6;
NUM : constant := 7;
QUOTE : constant := 8;
FIRSTCCL : constant := 9;
CCL : constant := 10;
ACTION : constant := 11;
RECOVER : constant := 12;
BRACEERROR : constant := 13;
ACTION_STRING : constant := 14;
yy_accept : constant array(0..205) of short :=
    (   0,
        0,    0,    0,    0,    0,    0,   80,   80,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       82,   13,    6,   12,   10,    1,   11,   13,   13,   13,
        9,   39,   31,   32,   25,   39,   38,   23,   39,   39,
       39,   31,   21,   39,   39,   24,   81,   19,   80,   80,
       15,   14,   16,   45,   81,   41,   42,   44,   46,   60,
       61,   58,   57,   59,   47,   49,   48,   47,   53,   52,
       53,   53,   55,   55,   55,   56,   66,   71,   70,   72,
       66,   72,   67,   64,   65,   81,   17,   63,   62,   73,

       75,   76,   77,    6,   10,    1,   11,    0,    0,    2,
        0,    7,    4,    5,    0,    9,   31,   32,    0,   28,
        0,    0,    0,   78,   78,   27,   26,   27,    0,   31,
       21,    0,    0,   35,    0,    0,   19,   18,   80,   80,
       15,   14,   43,   44,   57,   79,   79,   50,   51,   54,
       66,    0,   69,    0,   66,   67,    0,   17,   73,   74,
        0,    7,    0,    0,    3,    0,   29,    0,   36,    0,
       78,   27,   27,   37,    0,    0,    0,   35,    0,   30,
       79,   66,   68,    0,    0,    8,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   22,    0,   22,    0,

       22,    4,    0,   34,    0
    ) ;

yy_ec : constant array(CHARACTER'FIRST..CHARACTER'LAST) of short :=
    (   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    8,    9,    1,   10,   11,
       11,   11,   11,   12,   13,   11,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,    1,    1,   16,
        1,   17,   11,    1,   23,   22,   22,   22,   24,   25,
       22,   22,   22,   22,   22,   22,   22,   22,   26,   22,
       22,   27,   28,   29,   22,   22,   22,   30,   22,   22,
       18,   19,   20,   21,   22,    1,   23,   22,   22,   22,

       24,   25,   22,   22,   22,   22,   22,   22,   22,   22,
       26,   22,   22,   27,   28,   29,   22,   22,   22,   30,
       22,   22,   31,   32,   33,    1,    1
    ) ;

yy_meta : constant array(0..33) of short :=
    (   0,
        1,    2,    3,    2,    2,    4,    1,    1,    1,    5,
        1,    1,    6,    5,    7,    1,    1,    1,    8,    9,
        1,   10,   10,   10,   10,   10,   10,   10,   10,   10,
        5,   11,   12
    ) ;

yy_base : constant array(0..253) of short :=
    (   0,
        0,   29,   58,   89,  498,  305,  304,  303,    4,    8,
      119,  147,  284,  283,   32,   34,   65,   67,   93,   96,
      110,  113,  177,    0,  300,  299,   12,   15,   82,  121,
      301,  880,   12,  880,    0,   37,  880,  297,   11,  286,
        0,  880,   72,  880,  880,   76,  880,  282,  278,  281,
      196,  225,  880,  286,  281,  880,  290,    0,  289,  880,
        0,   78,  880,  880,  880,  880,  270,    0,  880,  880,
      880,  880,  274,  880,  880,  880,  880,  273,  880,  880,
      272,  273,  880,    0,  270,  880,    0,  880,  880,  109,
      271,  880,    0,  880,  880,  280,  880,  880,  880,    0,

      880,  880,    0,  133,    0,  148,  880,  264,  273,  880,
      261,    0,  236,  880,  261,    0,  122,  880,  260,  880,
      238,  133,  119,  880,  246,    0,  880,  245,  246,  277,
      880,  243,  152,    0,  252,  251,    0,  880,  250,  880,
        0,  158,  880,    0,  237,  880,  236,  880,  880,  880,
        0,  147,  880,    0,  309,    0,  247,  880,    0,  880,
      246,    0,  225,  244,  880,  243,  880,  219,  880,  197,
      229,    0,    0,  880,  230,  155,  228,    0,  239,  880,
      225,    0,  880,  236,  232,  880,  207,  208,  217,  212,
      164,  153,   89,   94,  194,   84,  880,   40,  880,   18,

      880,  880,    2,  880,  880,  342,  354,  366,  378,  390,
      402,  414,  426,  438,  450,  462,  474,  486,  493,  502,
      508,  520,  527,  536,  547,  559,  571,  583,  595,  607,
      619,  631,  638,  648,  660,  672,  684,  695,  702,  712,
      724,  736,  748,  760,  772,  784,  795,  807,  819,  831,
      843,  855,  867
    ) ;

yy_def : constant array(0..253) of short :=
    (   0,
      206,  206,  207,  207,  208,  208,  209,  209,  210,  210,
      211,  211,  212,  212,  213,  213,  214,  214,  215,  215,
      216,  216,  205,   23,  217,  217,  212,  212,  218,  218,
      205,  205,  205,  205,  219,  220,  205,  221,  222,  205,
      223,  205,  224,  205,  205,  205,  205,  205,  225,  226,
      227,  228,  205,  205,  205,  205,  229,  230,  231,  205,
      232,  205,  205,  205,  205,  205,  205,  233,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  226,  205,  205,
      234,  235,  205,  236,  226,  205,  237,  205,  205,  238,
      237,  205,  239,  205,  205,  240,  205,  205,  205,  241,

      205,  205,  242,  205,  219,  220,  205,  205,  221,  205,
      205,  243,  205,  205,  244,  223,  224,  205,  245,  205,
      205,  225,  225,  205,  205,  246,  205,  246,  205,  228,
      205,  205,  245,  247,  248,  229,  230,  205,  231,  205,
      232,  205,  205,  233,  205,  205,  205,  205,  205,  205,
      237,  238,  205,  238,  205,  239,  240,  205,  241,  205,
      249,  243,  205,  244,  205,  245,  205,  205,  205,  225,
      205,  246,  128,  205,  205,  248,  245,  247,  248,  205,
      205,  155,  205,  250,  249,  205,  205,  205,  225,  251,
      252,  253,  205,  205,  225,  251,  205,  252,  205,  253,

      205,  205,  205,  205,    0,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205
    ) ;

yy_nxt : constant array(0..913) of short :=
    (   0,
      205,   33,   34,   33,   33,   62,   63,   62,   62,   62,
       63,   62,   62,  104,   98,  104,  104,   98,  204,  112,
      201,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       36,   37,   36,   36,   71,   38,   71,   39,  113,  107,
      114,   40,  199,   72,   99,   72,   73,   99,   73,  108,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   43,
       44,   43,   43,   45,   74,   46,   74,   76,   47,   76,
       77,   47,   77,   48,  118,   49,   50,  120,  120,  142,
      120,  142,  142,   78,  101,   78,  197,  102,   51,   47,
       52,   53,   52,   52,   45,   65,   46,   54,   65,   47,

      103,   55,   47,  119,   48,   80,   49,   50,   80,   56,
      203,   81,   65,   82,   81,   65,   82,  202,  153,   51,
       47,   65,   84,  101,  118,   84,  102,  154,   85,   86,
       66,   85,   86,  170,  104,   67,  104,  104,  122,  103,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   65,
      107,  123,  169,  119,  167,  201,  153,  180,   66,  142,
      108,  142,  142,   67,  177,  154,  199,  191,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   87,   87,   88,
       87,   87,   89,   87,   87,   87,   90,   87,   87,   91,
       92,   87,   87,   87,   87,   87,   87,   87,   93,   93,

       93,   93,   93,   93,   93,   93,   93,   94,   87,   95,
      127,  189,  123,  169,  197,  123,  169,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  130,  131,  130,  130,
      167,  195,  194,  193,  186,  123,  169,  132,  183,  146,
      192,  180,  190,  124,  188,  167,  165,  187,  186,  158,
      181,  145,  140,  137,  180,  176,  133,  173,  175,  173,
      171,  168,  167,  165,  163,  161,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  110,  115,  174,  130,  131,
      130,  130,  158,  155,  125,  149,  147,  125,  145,  132,
      143,  140,  137,  135,  134,  125,  123,  121,  115,  110,

      205,   97,   97,   69,   69,   60,   60,   58,  133,  182,
      182,  183,  182,  182,  184,  182,  182,  182,  184,  182,
      182,  182,  184,  182,  182,  182,  182,  182,  182,  182,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      182,  184,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  105,  105,

       58,  205,  105,  106,  106,  205,  205,  106,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  116,  116,  205,  205,  116,  117,  117,  205,
      205,  205,  205,  205,  205,  205,  117,  122,  122,  205,
      122,  122,  122,  122,  122,  205,  122,  122,  122,  124,
      124,  205,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  126,  126,  205,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  136,  136,  136,  138,  205,  205,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  141,  141,  205,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  144,  144,  205,  205,  144,  146,  146,
      205,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      148,  148,  205,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  150,  150,  205,  150,  150,  150,  150,  150,
      205,  150,  150,  150,  151,  151,  205,  205,  205,  151,
      151,  151,  151,  205,  151,  152,  152,  205,  152,  152,

      152,  152,  152,  152,  152,  152,  152,  156,  156,  205,
      205,  156,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  159,  159,  205,  205,  159,  159,
      159,  205,  159,  159,  159,  159,  160,  160,  205,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  162,  162,
      205,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  172,  172,  205,  172,  172,  172,
      172,  172,  172,  172,  172,  178,  178,  205,  178,  178,

      178,  178,  178,  178,  178,  178,  178,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,   31,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205
    ) ;

yy_chk : constant array(0..913) of short :=
    (   0,
        0,    1,    1,    1,    1,    9,    9,    9,    9,   10,
       10,   10,   10,   33,   27,   33,   33,   28,  203,   39,
      200,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    2,    2,    2,   15,    2,   16,    2,   39,   36,
       39,    2,  198,   15,   27,   16,   15,   28,   16,   36,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
        3,    3,    3,    3,   15,    3,   16,   17,    3,   18,
       17,    3,   18,    3,   43,    3,    3,   46,   46,   62,
       46,   62,   62,   17,   29,   18,  196,   29,    3,    3,
        4,    4,    4,    4,    4,   19,    4,    4,   20,    4,

       29,    4,    4,   43,    4,   19,    4,    4,   20,    4,
      194,   19,   21,   19,   20,   22,   20,  193,   90,    4,
        4,   11,   21,   30,  117,   22,   30,   90,   21,   21,
       11,   22,   22,  123,  104,   11,  104,  104,  123,   30,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
      106,  122,  122,  117,  133,  192,  152,  176,   12,  142,
      106,  142,  142,   12,  133,  152,  191,  176,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       51,  170,  195,  195,  190,  170,  170,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   52,   52,   52,   52,
      177,  189,  188,  187,  185,  189,  189,   52,  184,  181,
      177,  179,  175,  171,  168,  166,  164,  163,  161,  157,
      147,  145,  139,  136,  135,  132,   52,  128,  129,  128,
      125,  121,  119,  115,  113,  111,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  109,  108,  128,  130,  130,
      130,  130,   96,   91,   85,   82,   81,   78,   73,  130,
       67,   59,   57,   55,   54,   50,   49,   48,   40,   38,

       31,   26,   25,   14,   13,    8,    7,    6,  130,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,

      210,  210,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  219,  219,

        5,    0,  219,  220,  220,    0,    0,  220,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  223,  223,    0,    0,  223,  224,  224,    0,
        0,    0,    0,    0,    0,    0,  224,  225,  225,    0,
      225,  225,  225,  225,  225,    0,  225,  225,  225,  226,
      226,    0,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  227,  227,    0,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  229,  229,  229,  229,  229,

      229,  229,  229,  229,  229,  229,  229,  230,    0,    0,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  232,  232,    0,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  233,  233,    0,    0,  233,  234,  234,
        0,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      235,  235,    0,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  236,  236,    0,  236,  236,  236,  236,  236,
        0,  236,  236,  236,  237,  237,    0,    0,    0,  237,
      237,  237,  237,    0,  237,  238,  238,    0,  238,  238,

      238,  238,  238,  238,  238,  238,  238,  239,  239,    0,
        0,  239,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  241,  241,    0,    0,  241,  241,
      241,    0,  241,  241,  241,  241,  242,  242,    0,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  243,  243,
        0,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  246,  246,    0,  246,  246,  246,
      246,  246,  246,  246,  246,  247,  247,    0,  247,  247,

      247,  247,  247,  247,  247,  247,  247,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205
    ) ;


-- copy whatever the last rule matched to the standard output

procedure ECHO is
begin
  for i in 1 .. yylength loop
    if yytext (i) /= ascii.lf then
      text_io.put (yytext (i));
    else
      text_io.new_line;
    end if;
  end loop;
end ECHO;

-- enter a start condition.
-- Using procedure requires a () after the ENTER, but makes everything
-- much neater.

procedure ENTER( state : integer ) is
begin
     yy_start := 1 + 2 * state;
end ENTER;

-- action number for EOF rule of a given start state
function YY_STATE_EOF(state : integer) return integer is
begin
     return YY_END_OF_BUFFER + state + 1;
end YY_STATE_EOF;

-- return all but the first 'n' matched characters back to the input stream
procedure yyless(n : integer) is
begin
        yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
        yy_cp := yy_bp + n;
        yy_c_buf_p := yy_cp;
        YY_DO_BEFORE_ACTION; -- set up yytext again
end yyless;

-- redefine this if you have something you want each time.
procedure YY_USER_ACTION is
begin
        null;
end;

-- yy_get_previous_state - get the state just before the EOB char was reached

function yy_get_previous_state return yy_state_type is
    yy_current_state : yy_state_type;
    yy_c : short;
    yy_bp : integer := yytext_ptr;
begin
    yy_current_state := yy_start;
    if ( yy_ch_buf(yy_bp-1) = ASCII.LF ) then
	yy_current_state := yy_current_state + 1;
    end if;

    for yy_cp in yytext_ptr..yy_c_buf_p - 1 loop
	yy_c := yy_ec(yy_ch_buf(yy_cp));
	if ( yy_accept(yy_current_state) /= 0 ) then
	    yy_last_accepting_state := yy_current_state;
	    yy_last_accepting_cpos := yy_cp;
	end if;
	while ( yy_chk(yy_base(yy_current_state) + yy_c) /= yy_current_state ) loop
	    yy_current_state := yy_def(yy_current_state);
	    if ( yy_current_state >= 206 ) then
		yy_c := yy_meta(yy_c);
	    end if;
	end loop;
	yy_current_state := yy_nxt(yy_base(yy_current_state) + yy_c);
    end loop;

    return yy_current_state;
end yy_get_previous_state;

procedure yyrestart( input_file : file_type ) is
begin
   set_input(input_file);
   yy_init := true;
end yyrestart;

begin -- of YYLex
<<new_file>>
        -- this is where we enter upon encountering an end-of-file and
        -- yywrap() indicating that we should continue processing

    if ( yy_init ) then
        if ( yy_start = 0 ) then
            yy_start := 1;      -- first start state
        end if;

        -- we put in the '\n' and start reading from [1] so that an
        -- initial match-at-newline will be true.

        yy_ch_buf(0) := ASCII.LF;
        yy_n_chars := 1;

        -- we always need two end-of-buffer characters.  The first causes
        -- a transition to the end-of-buffer state.  The second causes
        -- a jam in that state.

        yy_ch_buf(yy_n_chars) := YY_END_OF_BUFFER_CHAR;
        yy_ch_buf(yy_n_chars + 1) := YY_END_OF_BUFFER_CHAR;

        yy_eof_has_been_seen := false;

        yytext_ptr := 1;
        yy_c_buf_p := yytext_ptr;
        yy_hold_char := yy_ch_buf(yy_c_buf_p);
        yy_init := false;
    end if; -- yy_init

    loop                -- loops until end-of-file is reached
        yy_cp := yy_c_buf_p;

        -- support of yytext
        yy_ch_buf(yy_cp) := yy_hold_char;

        -- yy_bp points to the position in yy_ch_buf of the start of the
        -- current run.
	yy_bp := yy_cp;
	yy_current_state := yy_start;
	if ( yy_ch_buf(yy_bp-1) = ASCII.LF ) then
	    yy_current_state := yy_current_state + 1;
	end if;
	loop
		yy_c := yy_ec(yy_ch_buf(yy_cp));
		if ( yy_accept(yy_current_state) /= 0 ) then
		    yy_last_accepting_state := yy_current_state;
		    yy_last_accepting_cpos := yy_cp;
		end if;
		while ( yy_chk(yy_base(yy_current_state) + yy_c) /= yy_current_state ) loop
		    yy_current_state := yy_def(yy_current_state);
		    if ( yy_current_state >= 206 ) then
			yy_c := yy_meta(yy_c);
		    end if;
		end loop;
		yy_current_state := yy_nxt(yy_base(yy_current_state) + yy_c);
	    yy_cp := yy_cp + 1;
if ( yy_current_state = 205 ) then
    exit;
end if;
	end loop;
	yy_cp := yy_last_accepting_cpos;
	yy_current_state := yy_last_accepting_state;

<<next_action>>
	    yy_act := yy_accept(yy_current_state);
            YY_DO_BEFORE_ACTION;
            YY_USER_ACTION;

        if aflex_debug then  -- output acceptance info. for (-d) debug mode
            text_io.put( Standard_Error, "--accepting rule #" );
            text_io.put( Standard_Error, INTEGER'IMAGE(yy_act) );
            text_io.put_line( Standard_Error, "(""" & yytext & """)");
        end if;

<<do_action>>   -- this label is used only to access EOF actions
            case yy_act is
		when 0 => -- must backtrack
		-- undo the effects of YY_DO_BEFORE_ACTION
		yy_ch_buf(yy_cp) := yy_hold_char;
		yy_cp := yy_last_accepting_cpos;
		yy_current_state := yy_last_accepting_state;
		goto next_action;



when 1 => 
--# line 50 "ascan.l"
 indented_code := true; 

when 2 => 
--# line 51 "ascan.l"
 linenum := linenum + 1; ECHO;
				-- treat as a comment;
			

when 3 => 
--# line 54 "ascan.l"
 linenum := linenum + 1; ECHO; 

when 4 => 
--# line 55 "ascan.l"
 return ( SCDECL ); 

when 5 => 
--# line 56 "ascan.l"
 return ( XSCDECL ); 

when 6 => 
--# line 58 "ascan.l"
 return ( WHITESPACE ); 

when 7 => 
--# line 60 "ascan.l"

			sectnum := 2;
			misc.line_directive_out;
			ENTER(SECT2PROLOG);
			return ( SECTEND );
			

when 8 => 
--# line 67 "ascan.l"

			text_io.put( Standard_Error, "old-style lex command at line " );
			int_io.put( Standard_Error, linenum );
			text_io.put( Standard_Error, "ignored:" );
			text_io.new_line( Standard_Error );
			text_io.put( Standard_Error, ASCII.HT );
			text_io.put( Standard_Error, yytext(1..YYLength) );
			linenum := linenum + 1;
			

when 9 => 
--# line 77 "ascan.l"

			nmstr := vstr(yytext(1..YYLength));
			didadef := false;
			ENTER(PICKUPDEF);
			

when 10 => 
--# line 83 "ascan.l"
 nmstr := vstr(yytext(1..YYLength));
			  return NAME;
			

when 11 => 
--# line 86 "ascan.l"
 linenum := linenum + 1;
			  -- allows blank lines in section 1;
			

when 12 => 
--# line 89 "ascan.l"
 linenum := linenum + 1; return Newline; 

when 13 => 
--# line 90 "ascan.l"
 misc.synerr( "illegal character" );ENTER(RECOVER);

when 14 => 
--# line 92 "ascan.l"
 null;
			  -- separates name and definition;
			

when 15 => 
--# line 96 "ascan.l"

			nmdef := vstr(yytext(1..YYLength));

			i := tstring.len( nmdef );
			while ( i >= tstring.first ) loop
			    if ( (CHAR(nmdef,i) /= ' ') and
				 (CHAR(nmdef,i) /= ASCII.HT) ) then
				exit;
			    end if;
			    i := i - 1;
			end loop;

                        sym.ndinstal( nmstr,
				tstring.slice(nmdef, tstring.first, i) );
			didadef := true;
			

when 16 => 
--# line 113 "ascan.l"

			if ( not didadef ) then
			    misc.synerr( "incomplete name definition" );
			end if;
			ENTER(0);
			linenum := linenum + 1;
			

when 17 => 
--# line 121 "ascan.l"
 linenum := linenum + 1;
			  ENTER(0);
			  nmstr := vstr(yytext(1..YYLength));
			  return NAME;
			

when 18 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
yy_cp := yy_cp - 1;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 127 "ascan.l"

			linenum := linenum + 1;
			ACTION_ECHO;
			MARK_END_OF_PROLOG;
			ENTER(SECT2);
			

when 19 => 
--# line 134 "ascan.l"
 linenum := linenum + 1; ACTION_ECHO; 

when YY_END_OF_BUFFER +SECT2PROLOG + 1 
 =>
--# line 136 "ascan.l"
 MARK_END_OF_PROLOG;
			  return End_Of_Input;
			

when 21 => 
--# line 140 "ascan.l"
 linenum := linenum + 1;
			  -- allow blank lines in sect2;

			-- this rule matches indented lines which
			-- are not comments.
when 22 => 
--# line 145 "ascan.l"

			misc.synerr("indented code found outside of action");
			linenum := linenum + 1;
			

when 23 => 
--# line 150 "ascan.l"
 ENTER(SC); return ( '<' ); 

when 24 => 
--# line 151 "ascan.l"
 return ( '^' );  

when 25 => 
--# line 152 "ascan.l"
 ENTER(QUOTE); return ( '"' ); 

when 26 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
 yy_cp := yy_bp + 1;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 153 "ascan.l"
 ENTER(NUM); return ( '{' ); 

when 27 => 
--# line 154 "ascan.l"
 ENTER(BRACEERROR); 

when 28 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
 yy_cp := yy_bp + 1;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 155 "ascan.l"
 return ( '$' ); 

when 29 => 
--# line 157 "ascan.l"
 continued_action := true;
			  linenum := linenum + 1;
			  return Newline;
			

when 30 => 
--# line 162 "ascan.l"
 linenum := linenum + 1; ACTION_ECHO; 

when 31 => 
--# line 164 "ascan.l"

			-- this rule is separate from the one below because
			-- otherwise we get variable trailing context, so
			-- we can't build the scanner using -f,F

			bracelevel := 0;
			continued_action := false;
			ENTER(ACTION);
			return Newline;
			

when 32 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
yy_cp := yy_cp - 1;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 175 "ascan.l"

			bracelevel := 0;
			continued_action := false;
			ENTER(ACTION);
			return Newline;
			

when 33 => 
--# line 182 "ascan.l"
 linenum := linenum + 1; return Newline; 

when 34 => 
--# line 184 "ascan.l"
 return ( EOF_OP ); 

when 35 => 
--# line 186 "ascan.l"

			sectnum := 3;
			ENTER(SECT3);
			return ( End_Of_Input );
			-- to stop the parser
			

when 36 => 
--# line 193 "ascan.l"


			nmstr := vstr(yytext(1..YYLength));

			-- check to see if we've already encountered this ccl
                        cclval := sym.ccllookup( nmstr );
			if ( cclval /= 0 ) then
			    yylval := cclval;
			    cclreuse := cclreuse + 1;
			    return ( PREVCCL );
			else
			    -- we fudge a bit.  We know that this ccl will
			    -- soon be numbered as lastccl + 1 by cclinit
			    sym.cclinstal( nmstr, lastccl + 1 );

			    -- push back everything but the leading bracket
			    -- so the ccl can be rescanned

			    PUT_BACK_STRING(nmstr, 1);

			    ENTER(FIRSTCCL);
			    return ( '[' );
			end if;
			

when 37 => 
--# line 218 "ascan.l"

			nmstr := vstr(yytext(1..YYLength));
			-- chop leading and trailing brace
			tmpbuf := slice(vstr(yytext(1..YYLength)),
								2, YYLength-1);

			nmdefptr := sym.ndlookup( tmpbuf );
			if ( nmdefptr = NUL ) then
			    misc.synerr( "undefined {name}" );
			else
			    -- push back name surrounded by ()'s
			    unput(')');
			    PUT_BACK_STRING(nmdefptr, 0);
			    unput('(');
			end if;
			

when 38 => 
--# line 235 "ascan.l"
 tmpbuf := vstr(yytext(1..YYLength));
			  case tstring.CHAR(tmpbuf,1) is
				when '/' => return '/';
				when '|' => return '|';
				when '*' => return '*';
				when '+' => return '+';
				when '?' => return '?';
				when '.' => return '.';
				when '(' => return '(';
				when ')' => return ')';
				when others =>
					misc.aflexerror("error in aflex case");
			  end case;
			

when 39 => 
--# line 249 "ascan.l"
 tmpbuf := vstr(yytext(1..YYLength));
			  yylval := CHARACTER'POS(CHAR(tmpbuf,1));
			  return CHAR;
			

when 40 => 
--# line 253 "ascan.l"
 linenum := linenum + 1; return Newline; 

when 41 => 
--# line 256 "ascan.l"
 return ( ',' ); 

when 42 => 
--# line 257 "ascan.l"
 ENTER(SECT2); return ( '>' ); 

when 43 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
 yy_cp := yy_bp + 1;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 258 "ascan.l"
 ENTER(CARETISBOL); return ( '>' ); 

when 44 => 
--# line 259 "ascan.l"
 nmstr := vstr(yytext(1..YYLength));
			  return NAME;
			

when 45 => 
--# line 262 "ascan.l"
 misc.synerr( "bad start condition name" ); 

when 46 => 
--# line 264 "ascan.l"
 ENTER(SECT2); return ( '^' ); 

when 47 => 
--# line 267 "ascan.l"
 tmpbuf := vstr(yytext(1..YYLength));
			  yylval := CHARACTER'POS(CHAR(tmpbuf,1));
			  return CHAR;
			

when 48 => 
--# line 271 "ascan.l"
 ENTER(SECT2); return ( '"' ); 

when 49 => 
--# line 273 "ascan.l"

			misc.synerr( "missing quote" );
			ENTER(SECT2);
			linenum := linenum + 1;
			return ( '"' );
			

when 50 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
 yy_cp := yy_bp + 1;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 281 "ascan.l"
 ENTER(CCL); return ( '^' ); 

when 51 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
 yy_cp := yy_bp + 1;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 282 "ascan.l"
 return ( '^' ); 

when 52 => 
--# line 283 "ascan.l"
 ENTER(CCL); yylval := CHARACTER'POS('-'); return ( CHAR ); 

when 53 => 
--# line 284 "ascan.l"
 ENTER(CCL);
			  tmpbuf := vstr(yytext(1..YYLength));
			  yylval := CHARACTER'POS(CHAR(tmpbuf,1));
			  return CHAR;
			

when 54 => 
yy_ch_buf(yy_cp) := yy_hold_char; -- undo effects of setting up yytext
 yy_cp := yy_bp + 1;
yy_c_buf_p := yy_cp;
YY_DO_BEFORE_ACTION; -- set up yytext again
--# line 290 "ascan.l"
 return ( '-' ); 

when 55 => 
--# line 291 "ascan.l"
 tmpbuf := vstr(yytext(1..YYLength));
			  yylval := CHARACTER'POS(CHAR(tmpbuf,1));
			  return CHAR;
			

when 56 => 
--# line 295 "ascan.l"
 ENTER(SECT2); return ( ']' ); 

when 57 => 
--# line 298 "ascan.l"

			yylval := misc.myctoi( vstr(yytext(1..YYLength)) );
			return ( NUMBER );
			

when 58 => 
--# line 303 "ascan.l"
 return ( ',' ); 

when 59 => 
--# line 304 "ascan.l"
 ENTER(SECT2); return ( '}' ); 

when 60 => 
--# line 306 "ascan.l"

			misc.synerr( "bad character inside {}'s" );
			ENTER(SECT2);
			return ( '}' );
			

when 61 => 
--# line 312 "ascan.l"

			misc.synerr( "missing }" );
			ENTER(SECT2);
			linenum := linenum + 1;
			return ( '}' );
			

when 62 => 
--# line 320 "ascan.l"
 misc.synerr( "bad name in {}'s" ); ENTER(SECT2); 

when 63 => 
--# line 321 "ascan.l"
 misc.synerr( "missing }" );
			  linenum := linenum + 1;
			  ENTER(SECT2);
			

when 64 => 
--# line 326 "ascan.l"
 bracelevel := bracelevel + 1; 

when 65 => 
--# line 327 "ascan.l"
 bracelevel := bracelevel - 1; 

when 66 => 
--# line 328 "ascan.l"
 ACTION_ECHO; 

when 67 => 
--# line 329 "ascan.l"
 ACTION_ECHO; 

when 68 => 
--# line 330 "ascan.l"
 linenum := linenum + 1; ACTION_ECHO; 

when 69 => 
--# line 331 "ascan.l"
 ACTION_ECHO;
				  -- character constant;
			

when 70 => 
--# line 335 "ascan.l"
 ACTION_ECHO; ENTER(ACTION_STRING); 

when 71 => 
--# line 337 "ascan.l"

			linenum := linenum + 1;
			ACTION_ECHO;
			if ( bracelevel = 0 ) then
			    text_io.new_line ( temp_action_file );
			    ENTER(SECT2);
	                end if;
			

when 72 => 
--# line 345 "ascan.l"
 ACTION_ECHO; 

when 73 => 
--# line 347 "ascan.l"
 ACTION_ECHO; 

when 74 => 
--# line 348 "ascan.l"
 ACTION_ECHO; 

when 75 => 
--# line 349 "ascan.l"
 linenum := linenum + 1; ACTION_ECHO; 

when 76 => 
--# line 350 "ascan.l"
 ACTION_ECHO; ENTER(ACTION); 

when 77 => 
--# line 351 "ascan.l"
 ACTION_ECHO; 

when 78 => 
--# line 354 "ascan.l"

			yylval := CHARACTER'POS(misc.myesc( vstr(yytext(1..YYLength)) ));
			return ( CHAR );
			

when 79 => 
--# line 359 "ascan.l"

			yylval := CHARACTER'POS(misc.myesc( vstr(yytext(1..YYLength)) ));
			ENTER(CCL);
			return ( CHAR );
			

when 80 => 
--# line 366 "ascan.l"
 if ( check_yylex_here ) then
				return End_Of_Input;
			  else
				ECHO;
			  end if;
			

when 81 => 
--# line 372 "ascan.l"
raise AFLEX_SCANNER_JAMMED;
when YY_END_OF_BUFFER + INITIAL + 1 |
YY_END_OF_BUFFER + SECT2 + 1 |
YY_END_OF_BUFFER + SECT3 + 1 |
YY_END_OF_BUFFER + PICKUPDEF + 1 |
YY_END_OF_BUFFER + SC + 1 |
YY_END_OF_BUFFER + CARETISBOL + 1 |
YY_END_OF_BUFFER + NUM + 1 |
YY_END_OF_BUFFER + QUOTE + 1 |
YY_END_OF_BUFFER + FIRSTCCL + 1 |
YY_END_OF_BUFFER + CCL + 1 |
YY_END_OF_BUFFER + ACTION + 1 |
YY_END_OF_BUFFER + RECOVER + 1 |
YY_END_OF_BUFFER + BRACEERROR + 1 |
YY_END_OF_BUFFER + ACTION_STRING + 1 => 
    return End_Of_Input;
                when YY_END_OF_BUFFER =>
                    -- undo the effects of YY_DO_BEFORE_ACTION
                    yy_ch_buf(yy_cp) := yy_hold_char;

                    yytext_ptr := yy_bp;

                    case yy_get_next_buffer is
                        when EOB_ACT_END_OF_FILE =>
                            begin
                            if ( yywrap ) then
                                -- note: because we've taken care in
                                -- yy_get_next_buffer() to have set up yytext,
                                -- we can now set up yy_c_buf_p so that if some
                                -- total hoser (like aflex itself) wants
                                -- to call the scanner after we return the
                                -- End_Of_Input, it'll still work - another
                                -- End_Of_Input will get returned.

                                yy_c_buf_p := yytext_ptr;

                                yy_act := YY_STATE_EOF((yy_start - 1) / 2);

                                goto do_action;
                            else
                                --  start processing a new file
                                yy_init := true;
                                goto new_file;
                            end if;
                            end;
                        when EOB_ACT_RESTART_SCAN =>
                            yy_c_buf_p := yytext_ptr;
                            yy_hold_char := yy_ch_buf(yy_c_buf_p);
                        when EOB_ACT_LAST_MATCH =>
                            yy_c_buf_p := yy_n_chars;
                            yy_current_state := yy_get_previous_state;

                            yy_cp := yy_c_buf_p;
                            yy_bp := yytext_ptr;
                            goto next_action;
                        when others => null;
                        end case; -- case yy_get_next_buffer()
                when others =>
                    text_io.put( "action # " );
                    text_io.put( INTEGER'IMAGE(yy_act) );
                    text_io.new_line;
                    raise AFLEX_INTERNAL_ERROR;
            end case; -- case (yy_act)
        end loop; -- end of loop waiting for end of file
end YYLex;
--# line 372 "ascan.l"
begin
    if (call_yylex) then
    	toktype := YYLex;
    	call_yylex := false;
    	return toktype;
    end if;

    if ( eofseen ) then
	toktype := End_Of_Input;
    else
	toktype := YYLex;
    end if;
-- this tracing code allows easy tracing of aflex runs
if (trace) then
text_io.new_line(Standard_Error);
text_io.put(Standard_Error, "toktype = :" );
text_io.put(Standard_Error, Token'image(toktype));
text_io.put_line(Standard_Error, ":" );
end if;

    if ( toktype = End_Of_Input ) then
	eofseen := true;

	if ( sectnum = 1 ) then
	    misc.synerr(  "unexpected EOF" );
	    sectnum := 2;
	    toktype := SECTEND;
	else
	    if ( sectnum = 2 ) then
	    	sectnum := 3;
	    	toktype := SECTEND;
	    end if;
    	end if;
    end if;
    
    if ( trace ) then
	if ( beglin ) then
	    int_io.put( Standard_Error, num_rules + 1 );
	    text_io.put( Standard_Error, ASCII.HT );
	    beglin := false;
    	end if;

	case toktype is
	    when '<' | '>'|'^'|'$'|'"'|'['|']'|'{'|'}'|'|'|'('|
    	    	 ')'|'-'|'/'|'?'|'.'|'*'|'+'|',' =>
		text_io.put( Standard_Error, Token'image(toktype) );

	    when NEWLINE =>
		text_io.new_line(Standard_Error);
		if ( sectnum = 2 ) then
		    beglin := true;
    	    	end if;

	    when SCDECL =>
		text_io.put( Standard_Error, "%s" );

	    when XSCDECL =>
   		text_io.put( Standard_Error, "%x" );

	    when WHITESPACE =>
       		text_io.put( Standard_Error, " " );

	    when SECTEND =>
       		text_io.put_line( Standard_Error, "%%" );	   

		-- we set beglin to be true so we'll start
		-- writing out numbers as we echo rules.  aflexscan() has
		-- already assigned sectnum

		if ( sectnum = 2 ) then
		    beglin := true;
    	    	end if;

	    when NAME =>
		text_io.put( Standard_Error, ''' );
		text_io.put( Standard_Error, YYText);
		text_io.put( Standard_Error, ''' );

	    when CHAR =>
	    	if ( (yylval < CHARACTER'POS(' ')) or
		     (yylval = CHARACTER'POS(ASCII.DEL)) ) then
		    text_io.put( Standard_Error, '\' );
		    int_io.put( Standard_Error, yylval );
    		    text_io.put( Standard_Error, '\' );
		else
		    text_io.put( Standard_Error, Token'image(toktype) );
    	    	end if;

	    when NUMBER =>
    	    	int_io.put( Standard_Error, yylval );

	    when PREVCCL =>
		text_io.put( Standard_Error, '[' );
   	    	int_io.put( Standard_Error, yylval );
		text_io.put( Standard_Error, ']' );		

    	    when End_Of_Input =>
    	    	text_io.put( Standard_Error, "End Marker" );

	    when others =>
	    	text_io.put( Standard_Error, "Something weird:" );
		text_io.put_line( Standard_Error, Token'image(toktype));
    	end case;
    end if;
	    
    return toktype;

end get_token;
end scanner;
